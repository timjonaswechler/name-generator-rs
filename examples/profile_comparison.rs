//! Profile comparison example
//!
//! This example compares names generated by different approaches:
//! 1. Traditional pattern-based generation
//! 2. New LanguageProfile-based generation
//! 3. Hybrid approaches with phonetic rules

use name_generator::core::Name;
use name_generator::categories::profile_examples::*;
use name_generator::categories::examples::*;
use name_generator::language_profile::profile::LanguageProfile;
use name_generator::generators::profile_generator::LanguageProfileGenerator;
use rand::{SeedableRng};
use rand_chacha::ChaCha8Rng;

fn main() {
    // Use seeded RNG for reproducible results
    let mut rng = ChaCha8Rng::seed_from_u64(42);
    
    println!("=== Name Generation System Comparison ===\n");
    
    println!("1. Traditional Pattern-Based Generation:");
    println!("   Standard Star Names:");
    let standard_gen = Name::<StandardStar>::new();
    for i in 0..5 {
        let name = standard_gen.generate(&mut rng);
        println!("     {}: {}", i + 1, name);
    }
    
    println!("\n   Dark Star Names (with phonetic rules):");
    let dark_gen = Name::<DarkStarRulesOnly>::new();
    for i in 0..5 {
        let name = dark_gen.generate(&mut rng);
        println!("     {}: {}", i + 1, name);
    }
    
    println!("\n2. LanguageProfile-Based Generation:");
    
    println!("   German Profile Names:");
    let german_gen = Name::<GermanLanguageProfile>::new();
    for i in 0..5 {
        let name = german_gen.generate(&mut rng);
        println!("     {}: {}", i + 1, name);
    }
    
    println!("\n   English Profile Names:");
    let english_gen = Name::<EnglishLanguageProfile>::new();
    for i in 0..5 {
        let name = english_gen.generate(&mut rng);
        println!("     {}: {}", i + 1, name);
    }
    
    println!("\n3. Direct Profile Generator Usage:");
    let test_profile = LanguageProfile::create_simple_test_profile();
    let direct_gen = LanguageProfileGenerator::new(&test_profile);
    println!("   Direct test profile names:");
    for i in 0..5 {
        let name = direct_gen.generate(&mut rng);
        println!("     {}: {}", i + 1, name);
    }
    
    println!("\n4. System Characteristics Analysis:");
    
    // Reset RNG for consistent analysis
    let mut rng = ChaCha8Rng::seed_from_u64(42);
    
    println!("\n   Pattern-based system characteristics:");
    let pattern_names: Vec<String> = (0..20)
        .map(|_| standard_gen.generate(&mut rng))
        .collect();
    analyze_names("Standard Pattern", &pattern_names);
    
    // Reset RNG again
    let mut rng = ChaCha8Rng::seed_from_u64(42);
    
    println!("\n   LanguageProfile system characteristics:");
    let profile_names: Vec<String> = (0..20)
        .map(|_| german_gen.generate(&mut rng))
        .collect();
    analyze_names("German Profile", &profile_names);
    
    println!("\n=== Comparison Complete ===");
}

fn analyze_names(system_name: &str, names: &[String]) {
    let avg_length: f32 = names.iter().map(|n| n.len()).sum::<usize>() as f32 / names.len() as f32;
    let min_length = names.iter().map(|n| n.len()).min().unwrap_or(0);
    let max_length = names.iter().map(|n| n.len()).max().unwrap_or(0);
    
    println!("     {}: avg={:.1}, min={}, max={}", 
             system_name, avg_length, min_length, max_length);
    
    // Show a few examples
    print!("     Examples: ");
    for (i, name) in names.iter().take(3).enumerate() {
        if i > 0 { print!(", "); }
        print!("{}", name);
    }
    println!();
}